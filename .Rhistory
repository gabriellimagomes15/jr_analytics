print(paste('ERROR: ', e , sep = ' ') )
})
}## END FOR URLPAGE
return(dataDF)
}## END jobsGlassDoor function
jobsGlassDoor <- jobsGlassDoor()
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dados,column = 'descrip', stopWords = stopwords('en'))
dados <- jobsGlassDoor
dadosClean$descClean <- cleanText(data = dados,column = 'descrip', stopWords = stopwords('en'))
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
data <- dadosClean
column = "positJob"
data <- data %>%
select_(.dots = column)
postJobClean <- sapply(data, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
postJobClean
clearPostJob <- function(data, column = ''){
print('Clear Posit Jobs')
#data <- dadosClean
#column = "positJob"
data <- data %>%
select_(.dots = column)
postJobClean <- sapply(data, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
return(postJobClean)
}
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
dadosClean$positClean
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
cleanJobsGlassDoor <- function(dados){
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean$dateClean    <- ""
data <- dadosClean
dados2 <- data.frame(t(apply(data, 1, function(x){
if (grepl('days', x['date'])){
days  <- as.numeric( gsub("([0-9]+).*$", "\\1", x['date']) )
x['dateClean'] <- as.character(as.Date(x['dateCollect']) - days)
}else{
x['dateClean'] <- x['dateCollect']
}
x
})
),stringsAsFactors = F
)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean
dadosClean
city_replace <- list( city = c('Fort Saint John','RiviA?re-du-Loup'),
sig = c('BC','QC'))
city_replace
city_replace[1]
city_replace <- list( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'))
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'))
city_replace
city_replace$city[1]
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
city_replace$city[1]
dadosClean[dadosClean$stateClean == city_replace$city[1],]$stateClean
dadosClean
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean <- delDup(dadosClean)
dadosClean <- jobsGlassDoor# dados
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
#dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean
dadosClean[dadosClean$stateClean == 'Fort Saint John',]
length(dadosClean[dadosClean$stateClean == 'Fort Saint John',])
dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Repace Prov/States")
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == x['city'],])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == x['city'],]$stateClean
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Repace Prov/States")
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == x['city'],])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
#dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
tab <- table(jobsIndeedClean$cityClean) ###
view(tab)
View(tab)
tab <- table(jobsIndeedClean$) ###
tab <- table(jobsIndeedClean$stateClean) ###
View(tab)
tab <- table(jobsLoveMondClean$cityClean) ###
View(tab)
tab <- table(jobsLoveMondClean$stateClean) ###
View(tab)
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
tab <- table(jobsGlassDClean$stateClean) ###
View(tab)
jobsGlassDClean[jobsGlassDClean$stateClean == "Alberta",]$stateClean <- 'AB'
jobsGlassDClean[jobsGlassDClean$stateClean == "FairfaxVA",]$stateClean <- 'VA'
tab <- table(jobsGlassDClean$stateClean) ###
fwrite(jobsGlassDClean,paste('data/jobs/jobsGlassDClean',Sys.Date(),'.csv',sep = "") )

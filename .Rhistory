<<<<<<< HEAD
x   <- substr(x, pos+1, str_length(x))
}else{
x <- 'NI'
}
x <- gsub("\\W+", "", x) # remove double space
x
})
dadosClean$dateClean <- ""
dadosClean <- convertDate(dadosClean)
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'dateCollect','descClean','skills','education','language',
'cityClean','stateClean','country','url',"site")]
#fwrite(dadosClean,'data/jobsIndeedClean.csv')
dadosClean <- delDup(dadosClean)
return(dadosClean)
} ## END cleanJobsIndeed function
#### >>>> JOBS VACANCIES ####
jobsIndeed      <- fread("data/jobs/jobsIndeedBrasil2018-04-24.csv", encoding = 'UTF-8') # jobsIndeed()
jobsIndeedClean <- #fread("data/jobs/jobsIndeedClean2018-04-24.csv", encoding = 'UTF-8') #
cleanJobsIndeed(jobsIndeed)
table(jobsFinal$site)
cleanJobsIndeed <- function(dados){
#dados <- fread('data/jobsIndeedBrasil2018-02-10.csv', encoding = 'UTF-8')
dadosClean    <- dados
=======
print(paste('ERROR: ', e , sep = ' ') )
})
}## END FOR URLPAGE
return(dataDF)
}## END jobsGlassDoor function
jobsGlassDoor <- jobsGlassDoor()
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dados,column = 'descrip', stopWords = stopwords('en'))
dados <- jobsGlassDoor
dadosClean$descClean <- cleanText(data = dados,column = 'descrip', stopWords = stopwords('en'))
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
<<<<<<< HEAD
print("Clean Position")
## Limpando o campo 'positJob'
dadosClean$positClean <- sapply(dadosClean$positJob, function(x){
=======
data <- dadosClean
column = "positJob"
data <- data %>%
select_(.dots = column)
postJobClean <- sapply(data, function(x){
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
<<<<<<< HEAD
x <- gsub("Vaga de", "", x)
x
})
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
print("Clean Company")
dadosClean$companyClean <- sapply(dadosClean$company, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("^[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
print("Clean city")
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean <- sapply(dadosClean$city_state, function(x){
x <- gsub("[ \t]{2,}", "", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x <- gsub("\\,\\W+(\\w+).*$","", x)
x <- gsub("^\\W+|\\W+$","", x) # remove not word
if(x == ''){
x <- 'NI'
}
x
})
print("Clean state")
## Separando 'state' do campo 'city_state'
dadosClean$stateClean <- sapply(dadosClean$city_state, function(x){
x <- gsub('\n','',x)
pos <- regexpr('\\,',x)[1]
if(pos > 0){
x   <- substr(x, pos+1, str_length(x))
}else{
x <- 'NI'
}
x <- gsub("\\W+", "", x) # remove double space
x
})
dadosClean$dateClean <- ""
dadosClean      <- convertDate(dadosClean)
dadosClean$site <- "indeed"
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'dateCollect','descClean','skills','education','language',
'cityClean','stateClean','country','url',"site")]
#fwrite(dadosClean,'data/jobsIndeedClean.csv')
dadosClean <- delDup(dadosClean)
return(dadosClean)
} ## END cleanJobsIndeed function
jobsIndeedClean <- #fread("data/jobs/jobsIndeedClean2018-04-24.csv", encoding = 'UTF-8') #
cleanJobsIndeed(jobsIndeed)
table(jobsFinal$site)
cleanJobsLoveMond <- function(dados){
#dados <- fread('data/jobsLMBrasil2018-02-09.csv',encoding = 'UTF-8')
dadosClean    <- dados
=======
x
})
postJobClean
clearPostJob <- function(data, column = ''){
print('Clear Posit Jobs')
#data <- dadosClean
#column = "positJob"
data <- data %>%
select_(.dots = column)
postJobClean <- sapply(data, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
return(postJobClean)
}
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
dadosClean$positClean
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
cleanJobsGlassDoor <- function(dados){
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
<<<<<<< HEAD
print("Clean Position")
## Limpando o campo 'positJob'
dadosClean$positClean <- sapply(dadosClean$positJob, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x <- gsub("Vaga de", "", x)
x
})
print("Clean Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- companyClean <- sapply(dadosClean$company, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("^[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
print("Clean City")
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean <- sapply(dadosClean$city_state, function(x){
x <- gsub("[ \t]{2,}", "", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x <- gsub("\\-\\W+(\\w+).*$","", x)
x <- gsub("^\\W+|\\W+$","", x) # remove not word
if(x == ''){
x <- 'NI'
}
x
})
## Separando 'state' do campo 'city_state'
dadosClean$stateClean <- sapply(dadosClean$city_state, function(x){
x <- gsub('\n','',x)
pos <- regexpr('\\-',x)[1]
if(pos > 0){
x   <- substr(x, pos+1, str_length(x))
}else{
x <- 'NI'
}
x <- gsub("\\W+", "", x) # remove double space
x
})
dadosClean$dateClean <- dadosClean$date
dadosClean$site <- "loveMondays"
dadosClean      <- dadosClean[,c('id','positClean','companyClean','dateClean', 'dateCollect','descClean','skills','education','language',
'cityClean','stateClean','country','url',"site")]
dadosClean <- delDup(dadosClean)
#fwrite(dadosClean,'data/jobsLoveMClean.csv')
return(dadosClean)
}
=======
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean$dateClean    <- ""
data <- dadosClean
dados2 <- data.frame(t(apply(data, 1, function(x){
if (grepl('days', x['date'])){
days  <- as.numeric( gsub("([0-9]+).*$", "\\1", x['date']) )
x['dateClean'] <- as.character(as.Date(x['dateCollect']) - days)
}else{
x['dateClean'] <- x['dateCollect']
}
x
})
),stringsAsFactors = F
)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
dadosClean[is.na(dadosClean)] <- 'NI'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean
dadosClean
city_replace <- list( city = c('Fort Saint John','RiviA?re-du-Loup'),
sig = c('BC','QC'))
city_replace
city_replace[1]
city_replace <- list( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'))
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'))
city_replace
city_replace$city[1]
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
city_replace$city[1]
dadosClean[dadosClean$stateClean == city_replace$city[1],]$stateClean
dadosClean
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean <- delDup(dadosClean)
dadosClean <- jobsGlassDoor# dados
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
<<<<<<< HEAD
print("Repace Prov/States")
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario',"Alberta",
"FairfaxVA"),
sig = c('BC','QC','ON','NB','QC','ON','AB','VA'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == x['city'],])[1] > 0)
=======
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
#dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
<<<<<<< HEAD
dadosClean$site <- "glassdoor"
dadosClean      <- dadosClean[,c('id','positClean','companyClean','dateClean', 'dateCollect','descClean','skills','education','language',
'cityClean','stateClean','country','url',"site")]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsLoveMond      <- fread("data/jobs/jobsLMBrasil2018-04-24.csv", encoding = 'UTF-8') #jobsLoveM()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
b <- fread("data/jobs/glassDoorcanada2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
c <- fread("data/jobs/glassDoorus2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv", encoding = 'UTF-8',fill = T) #  jobsGlassDoor()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv", encoding = 'UTF-8',fill = T,quote = "\"") #  jobsGlassDoor()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv",fill = T,quote = "\"") #  jobsGlassDoor()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv",quote = "\"") #  jobsGlassDoor()
b <- fread("data/jobs/glassDoorcanada2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
a <- fread("data/jobs/glassDoorbrazil2018-04-24.csv",fill = T) #  jobsGlassDoor()
a <- read.csv("data/jobs/glassDoorbrazil2018-04-24.csv",fill = T) #  jobsGlassDoor()
a <- read.csv("data/jobs/glassDoorbrazil2018-04-24.csv",encoding = "UTF-8",fill = T) #  jobsGlassDoor()
b <- fread("data/jobs/glassDoorcanada2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
c <- read.csv("data/jobs/glassDoorus2018-04-24.csv", encoding = 'UTF-8') #  jobsGlassDoor()
jobsGlassDoor   <- rbind(a,b,c)
#### >>>> JOBS VACANCIES ####
jobsIndeed      <- fread("data/jobs/jobsIndeedBrasil2018-04-24.csv", encoding = 'UTF-8') # jobsIndeed()
jobsIndeedClean <- #fread("data/jobs/jobsIndeedClean2018-04-24.csv", encoding = 'UTF-8') #
cleanJobsIndeed(jobsIndeed)
jobsLoveMond      <- fread("data/jobs/jobsLMBrasil2018-04-24.csv", encoding = 'UTF-8') #jobsLoveM()
jobsLoveMondClean <- #fread("data/jobs/jobsLoveMondClean2018-04-24.csv", encoding = 'UTF-8') #
cleanJobsLoveMond(jobsLoveMond)
#tab <- table(jobsIndeedClean$stateClean) ###
fwrite(jobsIndeedClean,paste('data/jobs/jobsIndeedClean',Sys.Date(),'.csv',sep = "") )
#tab <- table(jobsLoveMondClean$stateClean) ###
fwrite(jobsLoveMondClean,paste('data/jobs/jobsLoveMondClean',Sys.Date(),'.csv',sep = "") )
jobsGlassDClean <- #fread("data/jobs/jobsGlassDClean2018-04-25.csv", encoding = 'UTF-8') #
cleanJobsGlassDoor(jobsGlassDoor)
colnames(jobsGlassDClean)
jobsFinal
colnames(jobsGlassDClean)
colnames(jobsFinal)
table(jobsGlassDClean$language)
mergeDados <- rbind(jobsGlassDClean,jobsIndeedClean,jobsLoveMondClean)
cleanJobsFinal <- function(data){
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[grepl('NI',data$state)]$state <- 'NI'
data$language <- gsub('espanhol','spanish',data$language)
data$education <- gsub('bacharelado','bachelor',data$education)
data$education <- gsub('mestre','master',data$education)
data$language <- sapply(data$language, function(x){
arrayLang <- unlist( str_split(x,' ') )
uniqueLang <- paste(unique(arrayLang),collapse = ' ')
uniqueLang
})
data$education <- sapply(data$education, function(x){
x <- unlist( str_split(x,' ') )
x <- paste(unique(x),collapse = ' ')
x
})
data$city <- gsub('Sao Paulo','S?o Paulo',data$city)
t <- data.frame(table(data$city))
data$city <- gsub('Sao Paulo','S?o Paulo',data$city)
t <- data.frame(table(data$city))
#fwrite(data,'data/jobsFinal.csv')
return(data)
}
tab <- table(jobsGlassDClean$language) ###
View(tab)
mergeDadosClean <- cleanJobsFinal(mergeDados)
View(mergeDadosClean)
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data <- mergeDados
data[data$country == 'brazil']$state
paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data <- mergeDados
data[data$country == 'brazil']$state
paste(data[data$country == 'brazil']$state,'_br',sep = '')
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
#data <- mergeDados
colnames(data)
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
#data <- mergeDados
colnames(data)
data[data$country == 'brazil']$state
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
#data <- mergeDados
#colnames(data)
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[data$country == 'brazil']$state
paste(data[data$country == 'brazil']$state,'_br',sep = '')
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
#data <- mergeDados
#colnames(data)
data[data$country == 'brazil']$stateClean <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
colnames(mergeDados) <- colnames(jobsFinal)
mergeDadosClean <- cleanJobsFinal(mergeDados)
tab <- table(mergeDadosClean$language) ###
View(tab)
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
table(mergeDadosClean$country)
table(jobsGlassDClean$country)
table(jobsIndeedClean$country)
table(jobsLoveMondClean$country)
cleanJobsIndeed <- function(dados){
#dados <- fread('data/jobsIndeedBrasil2018-02-10.csv', encoding = 'UTF-8')
dadosClean    <- dados
=======
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean
dadosClean[dadosClean$stateClean == 'Fort Saint John',]
length(dadosClean[dadosClean$stateClean == 'Fort Saint John',])
dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
<<<<<<< HEAD
print("Clean Position")
## Limpando o campo 'positJob'
dadosClean$positClean <- sapply(dadosClean$positJob, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("http\\w+", " ", x)    # remove html links
x <- gsub("\\W"," ", x) # remove not word
x <- gsub("[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x <- gsub("Vaga de", "", x)
x
})
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
print("Clean Company")
dadosClean$companyClean <- sapply(dadosClean$company, function(x){
x <- gsub("[[:punct:]]", " ", x) # remove punctuation
x <- gsub("[[:digit:]]", " ", x) # remove numbers
x <- gsub("^[ \t]{2,}", " ", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x
})
print("Clean city")
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean <- sapply(dadosClean$city_state, function(x){
x <- gsub("[ \t]{2,}", "", x) # remove double space
x <- gsub("^\\s+|\\s+$", "", x)# remove space in begin and final
x <- gsub("\\,\\W+(\\w+).*$","", x)
x <- gsub("^\\W+|\\W+$","", x) # remove not word
if(x == ''){
x <- 'NI'
}
x
})
print("Clean state")
## Separando 'state' do campo 'city_state'
dadosClean$stateClean <- sapply(dadosClean$city_state, function(x){
x <- gsub('\n','',x)
pos <- regexpr('\\,',x)[1]
if(pos > 0){
x   <- substr(x, pos+1, str_length(x))
}else{
x <- 'NI'
}
x <- gsub("\\W+", "", x) # remove double space
x
})
dadosClean$dateClean <- ""
dadosClean         <- convertDate(dadosClean)
dadosClean$country <- gsub("Brasil","brazil",dadosClean$country)
dadosClean$site    <- "indeed"
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'dateCollect','descClean','skills','education','language',
'cityClean','stateClean','country','url',"site")]
#fwrite(dadosClean,'data/jobsIndeedClean.csv')
dadosClean <- delDup(dadosClean)
return(dadosClean)
} ## END cleanJobsIndeed function
table(jobsFinal$country)
jobsFinal$country <- gsub("Brasil","brazil",jobsFinal$country)
table(jobsFinal$country)
fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
jobsFinal <- delDup(jobsFinal)
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
jobsFinal  <- fread("data/jobsFinal.csv", encoding = 'UTF-8')
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
jobsFinal  <- fread("data/jobsFinal_1.csv", encoding = 'UTF-8')
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
jobsFinal <- delDup(jobsFinal)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
jobsFinal$country <- gsub("Brasil","brazil",jobsFinal$country)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
table(jobsFinal$city)
jobsFinal <- cleanJobsFinal(jobsFinal)
table(jobsFinal$city)
cleanJobsFinal <- function(data){
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[grepl('NI',data$state)]$state <- 'NI'
data$language <- gsub('espanhol','spanish',data$language)
data$education <- gsub('bacharelado','bachelor',data$education)
data$education <- gsub('mestre','master',data$education)
data$language <- sapply(data$language, function(x){
arrayLang <- unlist( str_split(x,' ') )
uniqueLang <- paste(unique(arrayLang),collapse = ' ')
uniqueLang
})
data$education <- sapply(data$education, function(x){
x <- unlist( str_split(x,' ') )
x <- paste(unique(x),collapse = ' ')
x
})
data$city <- gsub('S?o Paulo','Sao Paulo',data$city)
#fwrite(data,'data/jobsFinal.csv')
return(data)
}
jobsFinal <- cleanJobsFinal(jobsFinal)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
cleanJobsFinal <- function(data){
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[grepl('NI',data$state)]$state <- 'NI'
data$language <- gsub('espanhol','spanish',data$language)
data$education <- gsub('bacharelado','bachelor',data$education)
data$education <- gsub('mestre','master',data$education)
data$language <- sapply(data$language, function(x){
arrayLang <- unlist( str_split(x,' ') )
uniqueLang <- paste(unique(arrayLang),collapse = ' ')
uniqueLang
})
data$education <- sapply(data$education, function(x){
x <- unlist( str_split(x,' ') )
x <- paste(unique(x),collapse = ' ')
x
})
data$city <- gsub('S\?o Paulo','Sao Paulo',data$city)
#fwrite(data,'data/jobsFinal.csv')
return(data)
}
cleanJobsFinal <- function(data){
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[grepl('NI',data$state)]$state <- 'NI'
data$language <- gsub('espanhol','spanish',data$language)
data$education <- gsub('bacharelado','bachelor',data$education)
data$education <- gsub('mestre','master',data$education)
data$language <- sapply(data$language, function(x){
arrayLang <- unlist( str_split(x,' ') )
uniqueLang <- paste(unique(arrayLang),collapse = ' ')
uniqueLang
})
data$education <- sapply(data$education, function(x){
x <- unlist( str_split(x,' ') )
x <- paste(unique(x),collapse = ' ')
x
})
data$city <- gsub('S\\?o Paulo','Sao Paulo',data$city)
#fwrite(data,'data/jobsFinal.csv')
return(data)
}
jobsFinal <- cleanJobsFinal(jobsFinal)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
jobsFinal  <- fread("data/jobsFinal_1.csv", encoding = 'UTF-8')
mergeDadosClean      <- cleanJobsFinal(mergeDados)
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
jobsFinal <- delDup(jobsFinal)
jobsFinal <- cleanJobsFinal(jobsFinal)
jobsFinal$country <- gsub("Brasil","brazil",jobsFinal$country)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
table(jobsFinal$city)
cleanJobsFinal <- function(data){
#data    <- data.table::fread('data/jobsFinal.csv',encoding = 'UTF-8')
data[data$country == 'brazil']$state <- paste(data[data$country == 'brazil']$state,'_br',sep = '')
data[grepl('NI',data$state)]$state <- 'NI'
data$language <- gsub('espanhol','spanish',data$language)
data$education <- gsub('bacharelado','bachelor',data$education)
data$education <- gsub('mestre','master',data$education)
data$language <- sapply(data$language, function(x){
arrayLang <- unlist( str_split(x,' ') )
uniqueLang <- paste(unique(arrayLang),collapse = ' ')
uniqueLang
})
data$education <- sapply(data$education, function(x){
x <- unlist( str_split(x,' ') )
x <- paste(unique(x),collapse = ' ')
x
})
data$city <- gsub('S\\?o Paulo','São Paulo',data$city)
data$city <- gsub('Sao Paulo','São Paulo',data$city)
#fwrite(data,'data/jobsFinal.csv')
return(data)
}
jobsFinal  <- fread("data/jobsFinal_1.csv", encoding = 'UTF-8')
mergeDadosClean      <- cleanJobsFinal(mergeDados)
jobsFinal <- rbind(mergeDadosClean, jobsFinal)
jobsFinal <- delDup(jobsFinal)
jobsFinal <- cleanJobsFinal(jobsFinal)
jobsFinal$country <- gsub("Brasil","brazil",jobsFinal$country)
#fwrite(jobsFinal,paste('data/jobsFinal',Sys.Date(),'.csv',sep = "") )
fwrite(jobsFinal,'data/jobsFinal.csv')
=======
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Repace Prov/States")
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
dadosClean <- jobsGlassDoor# dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == 'Fort Saint John',])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == x['city'],])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
dadosClean[dadosClean$stateClean == x['city'],]$stateClean
cleanJobsGlassDoor <- function(dados){
dadosClean <- dados
dadosClean <- delDup(dadosClean)
dadosClean$descClean <- cleanText(data = dadosClean,column = 'descrip', stopWords = stopwords('en'))
## Extraindo do campo 'descrip' da vaga dados sobre skill, education e language, requeridos para a vaga.
dadosClean$skills     <- getSkills(dadosClean,column = 'descClean')
dadosClean$education  <- getEducation(dadosClean,'descClean')
dadosClean$language   <- getLanguage(dadosClean,'descClean')
## Limpando o campo 'positJob'
dadosClean$positClean <- clearPostJob(dadosClean,'positJob')
print("Clear Company")
## Limpando o campo 'company'
if (length(dadosClean[is.na(dadosClean$company),]$company) > 0)
dadosClean[is.na(dadosClean$company),]$company <- 'NI'
dadosClean$companyClean <- clearCompany(dadosClean,'company')
## Separando 'city' e 'state' do campo 'city_state'
dadosClean$cityClean    <- clearCity(dadosClean$city_state)
dadosClean$cityClean    <- clearCity(dadosClean$cityClean)
dadosClean$stateClean   <- clearState(dadosClean$city_state)
dadosClean$dateClean    <- ""
dadosClean              <- clearDate(data = dadosClean)
print("Clean Canada Cities")
## GET THE PROVINCE OF THE CANADA
## CAPTURANDO A PROVINCIAS DAS CIDADES DO CANADA E ESTADOS DO BRASIL. É NECESSÁRIO PORQUE NO ANUNCIO DA VAGA SÓ TEM A CIDADE PARA ESTES PAISES
canadaCity           <- data.frame(jsonlite::fromJSON('data/cities/canadaCities.json'), stringsAsFactors = F)
colnames(canadaCity) <- c('city','prov')
dadosClean[dadosClean$country == 'canada',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'canada',]$cityClean, function(x){
r <- canadaCity[tolower(canadaCity$city) == tolower(x),'prov']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Clean Brazil Cities")
brazilCity <- fread('data/cities/brasilCities.csv',encoding = 'UTF-8')
dadosClean[dadosClean$country == 'brazil',]$stateClean <- unlist( sapply(dadosClean[dadosClean$country == 'brazil',]$cityClean, function(x){
r <- brazilCity[tolower( iconv( enc2native(brazilCity$city), to = "ASCII//TRANSLIT")  ) == tolower(x),'state']
if( length(r) > 0){
r[1]
}else{
x
}
}) )
print("Repace Prov/States")
### Cidades/estados que devem passar por transformação para inserir a sigla da provincia
city_replace <- data.frame( city = c('Fort Saint John','RiviA?re-du-Loup','ByWard Market',
'New Brunswick', 'Saguenay', 'Ontario'),
sig = c('BC','QC','ON','NB','QC','ON'),stringsAsFactors = F)
dadosClean[is.na(dadosClean)] <- 'NI'
apply(city_replace, 1, function(x){
if (dim(dadosClean[dadosClean$stateClean == x['city'],])[1] > 0)
dadosClean[dadosClean$stateClean == x['city'],]$stateClean <<- x['sig']
})
#dadosClean[dadosClean$stateClean == 'Fort Saint John',]$stateClean <- 'BC'
#dadosClean[dadosClean$stateClean == 'RiviA?re-du-Loup',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'ByWard Market',]$stateClean <- 'ON'
#dadosClean[dadosClean$stateClean == 'New Brunswick',]$stateClean <- 'NB'
#dadosClean[dadosClean$stateClean == 'Saguenay',]$stateClean <- 'QC'
#dadosClean[dadosClean$stateClean == 'Ontario',]$stateClean <- 'ON'
dadosClean <- dadosClean[,c('id','positClean','companyClean','dateClean', 'skills','education','language','dateCollect','country','cityClean','stateClean','url')]
#data.table::fwrite(dadosClean, 'data/jobsGlassDClean.csv')
return(dadosClean)
}
tab <- table(jobsIndeedClean$cityClean) ###
view(tab)
View(tab)
tab <- table(jobsIndeedClean$) ###
tab <- table(jobsIndeedClean$stateClean) ###
View(tab)
tab <- table(jobsLoveMondClean$cityClean) ###
View(tab)
tab <- table(jobsLoveMondClean$stateClean) ###
View(tab)
jobsGlassDClean <- cleanJobsGlassDoor(jobsGlassDoor)
tab <- table(jobsGlassDClean$stateClean) ###
View(tab)
jobsGlassDClean[jobsGlassDClean$stateClean == "Alberta",]$stateClean <- 'AB'
jobsGlassDClean[jobsGlassDClean$stateClean == "FairfaxVA",]$stateClean <- 'VA'
tab <- table(jobsGlassDClean$stateClean) ###
fwrite(jobsGlassDClean,paste('data/jobs/jobsGlassDClean',Sys.Date(),'.csv',sep = "") )
>>>>>>> dfffa2c68f3712ca05ef89b7b1ed0fdd7c5554ff
